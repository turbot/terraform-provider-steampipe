/*
Steampipe Cloud API

Steampipe Cloud API

API version: 1.0
Contact: support@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// OrgsWorkspaceConnectionAssociationsApiService OrgsWorkspaceConnectionAssociationsApi service
type OrgsWorkspaceConnectionAssociationsApiService service

type ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDeleteRequest struct {
	ctx _context.Context
	ApiService *OrgsWorkspaceConnectionAssociationsApiService
	orgHandle string
	workspaceHandle string
	connHandle string
}


func (r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDeleteRequest) Execute() (TypesWorkspaceConn, *_nethttp.Response, error) {
	return r.ApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDeleteExecute(r)
}

/*
OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDelete Delete org workspace connection association

Deletes the workspace association with the connection.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgHandle The handle of an organization where we want to delete the association.
 @param workspaceHandle The handle of the workspace whose association needs to be deleted.
 @param connHandle The handle of the conn whose association needs to be deleted.
 @return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDeleteRequest
*/
func (a *OrgsWorkspaceConnectionAssociationsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDelete(ctx _context.Context, orgHandle string, workspaceHandle string, connHandle string) ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDeleteRequest {
	return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDeleteRequest{
		ApiService: a,
		ctx: ctx,
		orgHandle: orgHandle,
		workspaceHandle: workspaceHandle,
		connHandle: connHandle,
	}
}

// Execute executes the request
//  @return TypesWorkspaceConn
func (a *OrgsWorkspaceConnectionAssociationsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDeleteExecute(r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDeleteRequest) (TypesWorkspaceConn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  TypesWorkspaceConn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsWorkspaceConnectionAssociationsApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleDelete")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/{org_handle}/workspace/{workspace_handle}/conn/{conn_handle}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_handle"+"}", _neturl.PathEscape(parameterToString(r.orgHandle, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_handle"+"}", _neturl.PathEscape(parameterToString(r.workspaceHandle, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"conn_handle"+"}", _neturl.PathEscape(parameterToString(r.connHandle, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGetRequest struct {
	ctx _context.Context
	ApiService *OrgsWorkspaceConnectionAssociationsApiService
	orgHandle string
	workspaceHandle string
	connHandle string
}


func (r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGetRequest) Execute() (TypesWorkspaceConn, *_nethttp.Response, error) {
	return r.ApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGetExecute(r)
}

/*
OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGet Get org workspace connection association

Get the details for a workspace and connection association on an organization.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgHandle The handle of the org for which you want to get the association.
 @param workspaceHandle The handle of the workspace where the connection exist.
 @param connHandle The handle of the conn whose association details needs to be fetched.
 @return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGetRequest
*/
func (a *OrgsWorkspaceConnectionAssociationsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGet(ctx _context.Context, orgHandle string, workspaceHandle string, connHandle string) ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGetRequest {
	return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGetRequest{
		ApiService: a,
		ctx: ctx,
		orgHandle: orgHandle,
		workspaceHandle: workspaceHandle,
		connHandle: connHandle,
	}
}

// Execute executes the request
//  @return TypesWorkspaceConn
func (a *OrgsWorkspaceConnectionAssociationsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGetExecute(r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGetRequest) (TypesWorkspaceConn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  TypesWorkspaceConn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsWorkspaceConnectionAssociationsApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/{org_handle}/workspace/{workspace_handle}/conn/{conn_handle}"
	localVarPath = strings.Replace(localVarPath, "{"+"org_handle"+"}", _neturl.PathEscape(parameterToString(r.orgHandle, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_handle"+"}", _neturl.PathEscape(parameterToString(r.workspaceHandle, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"conn_handle"+"}", _neturl.PathEscape(parameterToString(r.connHandle, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest struct {
	ctx _context.Context
	ApiService *OrgsWorkspaceConnectionAssociationsApiService
	orgHandle string
	workspaceHandle string
	limit *int32
	nextToken *string
}

// Pagination limit
func (r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest) Limit(limit int32) ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest {
	r.limit = &limit
	return r
}
// When a list is truncated this element specifies the last part of the list, as well as the value to use for the part-number-marker request parameter in a subsequent request.
func (r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest) NextToken(nextToken string) ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest {
	r.nextToken = &nextToken
	return r
}

func (r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest) Execute() (TypesListWorkspaceConnResponse, *_nethttp.Response, error) {
	return r.ApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnGetExecute(r)
}

/*
OrgOrgHandleWorkspaceWorkspaceHandleConnGet List org workspace connection associations

List the connections associated with a workspace.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgHandle The handle of an organization for which you want to list the associations.
 @param workspaceHandle The handle of the workspace where you want to list the associations.
 @return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest
*/
func (a *OrgsWorkspaceConnectionAssociationsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnGet(ctx _context.Context, orgHandle string, workspaceHandle string) ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest {
	return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest{
		ApiService: a,
		ctx: ctx,
		orgHandle: orgHandle,
		workspaceHandle: workspaceHandle,
	}
}

// Execute executes the request
//  @return TypesListWorkspaceConnResponse
func (a *OrgsWorkspaceConnectionAssociationsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnGetExecute(r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnGetRequest) (TypesListWorkspaceConnResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  TypesListWorkspaceConnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsWorkspaceConnectionAssociationsApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/{org_handle}/workspace/{workspace_handle}/conn"
	localVarPath = strings.Replace(localVarPath, "{"+"org_handle"+"}", _neturl.PathEscape(parameterToString(r.orgHandle, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_handle"+"}", _neturl.PathEscape(parameterToString(r.workspaceHandle, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.nextToken != nil {
		localVarQueryParams.Add("next_token", parameterToString(*r.nextToken, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiOrgOrgHandleWorkspaceWorkspaceHandleConnPostRequest struct {
	ctx _context.Context
	ApiService *OrgsWorkspaceConnectionAssociationsApiService
	orgHandle string
	workspaceHandle string
	request *TypesCreateWorkspaceConnRequest
}

// The request body for the association to be created.
func (r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnPostRequest) Request(request TypesCreateWorkspaceConnRequest) ApiOrgOrgHandleWorkspaceWorkspaceHandleConnPostRequest {
	r.request = &request
	return r
}

func (r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnPostRequest) Execute() (TypesWorkspaceConn, *_nethttp.Response, error) {
	return r.ApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnPostExecute(r)
}

/*
OrgOrgHandleWorkspaceWorkspaceHandleConnPost Create org workspace connection association

Associate a connection with the workspace. A workspace can have multiple association.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgHandle The handle of the organization where we want to create an association.
 @param workspaceHandle The handle of the workspace where the connection will be associated.
 @return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnPostRequest
*/
func (a *OrgsWorkspaceConnectionAssociationsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnPost(ctx _context.Context, orgHandle string, workspaceHandle string) ApiOrgOrgHandleWorkspaceWorkspaceHandleConnPostRequest {
	return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnPostRequest{
		ApiService: a,
		ctx: ctx,
		orgHandle: orgHandle,
		workspaceHandle: workspaceHandle,
	}
}

// Execute executes the request
//  @return TypesWorkspaceConn
func (a *OrgsWorkspaceConnectionAssociationsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnPostExecute(r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnPostRequest) (TypesWorkspaceConn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  TypesWorkspaceConn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsWorkspaceConnectionAssociationsApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnPost")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/{org_handle}/workspace/{workspace_handle}/conn"
	localVarPath = strings.Replace(localVarPath, "{"+"org_handle"+"}", _neturl.PathEscape(parameterToString(r.orgHandle, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_handle"+"}", _neturl.PathEscape(parameterToString(r.workspaceHandle, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.request == nil {
		return localVarReturnValue, nil, reportError("request is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.request
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 402 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
