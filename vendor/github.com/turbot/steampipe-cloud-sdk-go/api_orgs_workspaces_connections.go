/*
Steampipe Cloud API

Steampipe Cloud API

API version: 1.0
Contact: support@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// OrgsWorkspacesConnectionsApiService OrgsWorkspacesConnectionsApi service
type OrgsWorkspacesConnectionsApiService service

type ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGetRequest struct {
	ctx _context.Context
	ApiService *OrgsWorkspacesConnectionsApiService
	orgHandle string
	workspaceHandle string
	connHandle string
}


func (r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGetRequest) Execute() (TypesConnectionTestResponse, *_nethttp.Response, error) {
	return r.ApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGetExecute(r)
}

/*
OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGet Test org workspace connection

Test an org connection associated with a workspace to ensure that its config works with common plugin queries.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgHandle The handle of an organization where we want to delete the association.
 @param workspaceHandle The handle of the workspace whose association needs to be deleted.
 @param connHandle The handle of the conn whose association needs to be deleted.
 @return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGetRequest
*/
func (a *OrgsWorkspacesConnectionsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGet(ctx _context.Context, orgHandle string, workspaceHandle string, connHandle string) ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGetRequest {
	return ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGetRequest{
		ApiService: a,
		ctx: ctx,
		orgHandle: orgHandle,
		workspaceHandle: workspaceHandle,
		connHandle: connHandle,
	}
}

// Execute executes the request
//  @return TypesConnectionTestResponse
func (a *OrgsWorkspacesConnectionsApiService) OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGetExecute(r ApiOrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGetRequest) (TypesConnectionTestResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  TypesConnectionTestResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrgsWorkspacesConnectionsApiService.OrgOrgHandleWorkspaceWorkspaceHandleConnConnHandleTestGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/org/{org_handle}/workspace/{workspace_handle}/conn/{conn_handle}/test"
	localVarPath = strings.Replace(localVarPath, "{"+"org_handle"+"}", _neturl.PathEscape(parameterToString(r.orgHandle, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workspace_handle"+"}", _neturl.PathEscape(parameterToString(r.workspaceHandle, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"conn_handle"+"}", _neturl.PathEscape(parameterToString(r.connHandle, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v SperrErrorModel
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
