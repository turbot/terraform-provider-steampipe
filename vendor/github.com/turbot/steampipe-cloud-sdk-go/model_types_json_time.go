/*
Steampipe Cloud API

Steampipe Cloud API

API version: 1.0
Contact: support@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TypesJSONTime struct for TypesJSONTime
type TypesJSONTime struct {
	TimeTime *string `json:"time.Time,omitempty"`
}

// NewTypesJSONTime instantiates a new TypesJSONTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesJSONTime() *TypesJSONTime {
	this := TypesJSONTime{}
	return &this
}

// NewTypesJSONTimeWithDefaults instantiates a new TypesJSONTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesJSONTimeWithDefaults() *TypesJSONTime {
	this := TypesJSONTime{}
	return &this
}

// GetTimeTime returns the TimeTime field value if set, zero value otherwise.
func (o *TypesJSONTime) GetTimeTime() string {
	if o == nil || o.TimeTime == nil {
		var ret string
		return ret
	}
	return *o.TimeTime
}

// GetTimeTimeOk returns a tuple with the TimeTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesJSONTime) GetTimeTimeOk() (*string, bool) {
	if o == nil || o.TimeTime == nil {
		return nil, false
	}
	return o.TimeTime, true
}

// HasTimeTime returns a boolean if a field has been set.
func (o *TypesJSONTime) HasTimeTime() bool {
	if o != nil && o.TimeTime != nil {
		return true
	}

	return false
}

// SetTimeTime gets a reference to the given string and assigns it to the TimeTime field.
func (o *TypesJSONTime) SetTimeTime(v string) {
	o.TimeTime = &v
}

func (o TypesJSONTime) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TimeTime != nil {
		toSerialize["time.Time"] = o.TimeTime
	}
	return json.Marshal(toSerialize)
}

type NullableTypesJSONTime struct {
	value *TypesJSONTime
	isSet bool
}

func (v NullableTypesJSONTime) Get() *TypesJSONTime {
	return v.value
}

func (v *NullableTypesJSONTime) Set(val *TypesJSONTime) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesJSONTime) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesJSONTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesJSONTime(val *TypesJSONTime) *NullableTypesJSONTime {
	return &NullableTypesJSONTime{value: val, isSet: true}
}

func (v NullableTypesJSONTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesJSONTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


